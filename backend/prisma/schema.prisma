generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("JAWSDB_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                Int                @id @default(autoincrement())
  phone             String             @unique
  name              String             
  avatar            String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  tokens            Token[]
  refreshToken      RefreshToken?
  UserAddVocabulary UserAddVocabulary?
}

model Token {  
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

model Vocabulary {
  id        Int      @id @default(autoincrement())
  category  String
  level     String
  word      String
  mean      String
  frequency String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAddVocabulary {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int      @unique
  react            String?
  next             String?
  axios            String?
  styledComponents String?
  recoil           String?
  reactRedux       String?
  reactHookForm    String?
  reactRouter      String?
  tailwindcss      String?
  reactQuery       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model SeperatedVocabulary {
  id   Int    @id @default(autoincrement())
  data String @db.LongText
}

model Title {
  id       Int    @id @default(autoincrement())
  category String
  data     String @db.LongText
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
